// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transport.Data;

#nullable disable

namespace Transport.WebHost.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240114143336_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Transport.Data.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AvailabilityStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("Drivers_PK");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Transport.Data.Models.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArrivedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedOn")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("RiderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("TookOffOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("Rides_PK");

                    b.HasIndex("DriverId");

                    b.HasIndex("RiderId");

                    b.HasIndex("UserReviewId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("Transport.Data.Models.RideStop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<short>("OrderingNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("RideStops_PK");

                    b.HasIndex("RideId");

                    b.ToTable("RideStops");
                });

            modelBuilder.Entity("Transport.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("Users_PK");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Transport.Data.Models.UserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("UserReviews_PK");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Transport.Data.Models.UserReviewsDriver", b =>
                {
                    b.Property<Guid>("UserReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserReviewId", "DriverId")
                        .HasName("UserReviewsDrivers_PK");

                    b.HasIndex("DriverId");

                    b.HasIndex(new[] { "UserReviewId" }, "UserReviewsDrivers_UN")
                        .IsUnique();

                    b.ToTable("UserReviewsDrivers");
                });

            modelBuilder.Entity("Transport.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RegisteredInCountry")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<short>("Seats")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("Vehicles_PK");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Transport.Data.Models.Driver", b =>
                {
                    b.HasOne("Transport.Data.Models.User", "IdNavigation")
                        .WithOne("Driver")
                        .HasForeignKey("Transport.Data.Models.Driver", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Drivers_Users_FK");

                    b.HasOne("Transport.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Drivers_Vehicles_FK");

                    b.Navigation("IdNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transport.Data.Models.Ride", b =>
                {
                    b.HasOne("Transport.Data.Models.Driver", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Rides_Drivers_FK");

                    b.HasOne("Transport.Data.Models.User", "Rider")
                        .WithMany("Rides")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Rides_Users_FK");

                    b.HasOne("Transport.Data.Models.UserReview", "UserReview")
                        .WithMany("Rides")
                        .HasForeignKey("UserReviewId")
                        .HasConstraintName("Rides_UserReviews_FK");

                    b.Navigation("Driver");

                    b.Navigation("Rider");

                    b.Navigation("UserReview");
                });

            modelBuilder.Entity("Transport.Data.Models.RideStop", b =>
                {
                    b.HasOne("Transport.Data.Models.Ride", "Ride")
                        .WithMany("RideStops")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RideStops_Rides_FK");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("Transport.Data.Models.UserReview", b =>
                {
                    b.HasOne("Transport.Data.Models.User", "Author")
                        .WithMany("UserReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserReviews_Users_FK");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Transport.Data.Models.UserReviewsDriver", b =>
                {
                    b.HasOne("Transport.Data.Models.Driver", "Driver")
                        .WithMany("UserReviewsDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserReviewsDrivers_Drivers_FK");

                    b.HasOne("Transport.Data.Models.UserReview", "UserReview")
                        .WithOne("UserReviewsDriver")
                        .HasForeignKey("Transport.Data.Models.UserReviewsDriver", "UserReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("UserReviewsDrivers_UserReviews_FK");

                    b.Navigation("Driver");

                    b.Navigation("UserReview");
                });

            modelBuilder.Entity("Transport.Data.Models.Driver", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("UserReviewsDrivers");
                });

            modelBuilder.Entity("Transport.Data.Models.Ride", b =>
                {
                    b.Navigation("RideStops");
                });

            modelBuilder.Entity("Transport.Data.Models.User", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("Rides");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("Transport.Data.Models.UserReview", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("UserReviewsDriver");
                });

            modelBuilder.Entity("Transport.Data.Models.Vehicle", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
